definitions:
  base.BaseReq:
    properties:
      LogData:
        $ref: '#/definitions/base.LogData'
      ResponseData:
        $ref: '#/definitions/base.ResponseData'
    type: object
  base.LogData:
    properties:
      ExecutionTime:
        type: string
      HttpStatusCode:
        type: integer
      IP:
        type: string
      Route:
        type: string
    type: object
  base.ResponseData:
    properties:
      Response: {}
    type: object
  db.Receivable:
    properties:
      agencia:
        type: string
      banco:
        type: string
      chave_pix:
        type: string
      conta_corrente:
        type: string
      data_emissao_titulo:
        type: string
      data_vencimento_titulo:
        type: string
      desconto_antecipacao:
        type: number
      devedor_cnpj:
        type: string
      devedor_nome:
        type: string
      empresa_cnpj:
        type: string
      empresa_email:
        type: string
      empresa_endereco:
        type: string
      empresa_nome:
        type: string
      empresa_telefone:
        type: string
      garantias:
        type: string
      id:
        type: integer
      valor:
        type: number
    type: object
  erros.InternalServerError:
    properties:
      BaseReq:
        $ref: '#/definitions/base.BaseReq'
      InternalServerError:
        $ref: '#/definitions/erros.Message'
      Response: {}
    type: object
  erros.Message:
    properties:
      message:
        type: string
    type: object
  inter.AllTokensOutput:
    properties:
      tokens:
        items:
          $ref: '#/definitions/inter.TokenCreateOutput'
        type: array
    type: object
  inter.ContractController:
    properties:
      contractType:
        type: string
      description:
        type: string
      name:
        type: string
      symbol:
        type: string
    type: object
  inter.ContractDeploymentResponse:
    properties:
      address:
        type: string
      blockchainName:
        type: string
      blockscanUrl:
        type: string
      createdAt:
        type: string
      deployedAt:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      symbol:
        type: string
      type:
        type: string
      updatedAt:
        type: string
    type: object
  inter.DeployController:
    properties:
      contractId:
        type: string
    type: object
  inter.TokenCreateInput:
    properties:
      assetId:
        description: Adicionado AssetID
        type: string
      assetValue:
        type: number
      contractId:
        type: string
      description:
        type: string
      expireDate:
        type: string
      guarantees:
        description: Adicionado Guarantees
        type: string
      imageUrl:
        type: string
      maxSupply:
        type: integer
      name:
        type: string
      nominalValue:
        description: Adicionado NominalValue
        type: number
      traits:
        additionalProperties:
          type: string
        type: object
    type: object
  inter.TokenCreateOutput:
    properties:
      contractId:
        type: string
      createdAt:
        type: string
      currentSupply:
        type: integer
      description:
        type: string
      id:
        type: string
      imageUrl:
        type: string
      maxSupply:
        type: integer
      metadataUrl:
        type: string
      name:
        type: string
      traits:
        additionalProperties:
          type: string
        type: object
      updatedAt:
        type: string
      uriNumber:
        type: integer
    type: object
  inter.UserController:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  inter.UserOutputController:
    properties:
      address:
        type: string
      createdAt:
        type: string
      id:
        type: string
      projectId:
        type: string
      updatedAt:
        type: string
    type: object
  receivable.ErrorResponse:
    properties:
      error:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: 3.145.127.73:8080
info:
  contact: {}
  description: This is a server for app.
  title: Brasa
  version: "1.0"
paths:
  /api/all-contract:
    get:
      consumes:
      - application/json
      description: Get All contracts
      produces:
      - application/json
      responses:
        "200":
          description: New User Created successfully
          schema:
            $ref: '#/definitions/inter.UserOutputController'
        "500":
          description: Unable to store data in database
          schema:
            $ref: '#/definitions/erros.InternalServerError'
      summary: Get All contracts
      tags:
      - Contract
  /api/all-token:
    get:
      consumes:
      - application/json
      description: Create a new user in db
      parameters:
      - description: contract id
        in: header
        name: ContractId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: New User Created successfully
          schema:
            $ref: '#/definitions/inter.AllTokensOutput'
        "500":
          description: Unable to store data in database
          schema:
            $ref: '#/definitions/erros.InternalServerError'
      summary: Get all Tokens
      tags:
      - Token
  /api/contract:
    get:
      consumes:
      - application/json
      description: Pull a contract from blockchain
      parameters:
      - description: contract Id
        in: header
        name: ContractId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: New User Created successfully
          schema:
            $ref: '#/definitions/inter.UserOutputController'
        "500":
          description: Unable to store data in database
          schema:
            $ref: '#/definitions/erros.InternalServerError'
      summary: Pull a contract
      tags:
      - Contract
  /api/create-contract:
    post:
      consumes:
      - application/json
      description: Create a new contract
      parameters:
      - description: Data for make a new contract
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/inter.ContractController'
      produces:
      - application/json
      responses:
        "200":
          description: New Contract Created successfully
          schema:
            $ref: '#/definitions/inter.UserOutputController'
        "500":
          description: Error for make a new contract
          schema:
            $ref: '#/definitions/erros.InternalServerError'
      summary: Create Contract
      tags:
      - Contract
  /api/create-token:
    post:
      consumes:
      - application/json
      description: Create a new user in db
      parameters:
      - description: Data for make a new token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/inter.TokenCreateInput'
      produces:
      - application/json
      responses:
        "200":
          description: New Token Created successfully
          schema:
            $ref: '#/definitions/inter.TokenCreateOutput'
        "500":
          description: Unable to created a new token
          schema:
            $ref: '#/definitions/erros.InternalServerError'
      summary: Make Tokens
      tags:
      - Token
  /api/deploy-contract:
    post:
      consumes:
      - application/json
      description: Deploy new contract in the blockchain
      parameters:
      - description: ContractId for deploy a new contract
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/inter.DeployController'
      produces:
      - application/json
      responses:
        "200":
          description: Deploy its a sucessfully
          schema:
            $ref: '#/definitions/inter.ContractDeploymentResponse'
        "500":
          description: Unable to make deploy
          schema:
            $ref: '#/definitions/erros.InternalServerError'
      summary: Deploy new contract
      tags:
      - Contract
  /api/get-token:
    get:
      consumes:
      - application/json
      description: Create a new user in db
      parameters:
      - description: E-mail from user
        in: header
        name: ContractId
        required: true
        type: string
      - description: Its a uri content in tokens
        in: header
        name: UriToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: New User Created successfully
          schema:
            $ref: '#/definitions/inter.UserOutputController'
        "500":
          description: Unable to store data in database
          schema:
            $ref: '#/definitions/erros.InternalServerError'
      summary: Get specify token
      tags:
      - Token
  /api/loggout:
    put:
      consumes:
      - application/json
      description: pull user and wallet for db
      parameters:
      - description: E-mail from user
        in: header
        name: Email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: New User Created successfully
          schema:
            $ref: '#/definitions/inter.UserOutputController'
        "500":
          description: Unable to store data in database
          schema:
            $ref: '#/definitions/erros.InternalServerError'
      summary: Loggout User
      tags:
      - User
  /api/user:
    get:
      consumes:
      - application/json
      description: pull user and wallet for db
      parameters:
      - description: E-mail from user
        in: header
        name: Email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: New User Created successfully
          schema:
            $ref: '#/definitions/inter.UserOutputController'
        "500":
          description: Unable to store data in database
          schema:
            $ref: '#/definitions/erros.InternalServerError'
      summary: Get user
      tags:
      - User
  /create-user:
    post:
      consumes:
      - application/json
      description: Create a new user in db
      parameters:
      - description: Data for make a new user
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/inter.UserController'
      produces:
      - application/json
      responses:
        "200":
          description: New User Created successfully
          schema:
            $ref: '#/definitions/inter.UserOutputController'
        "500":
          description: Unable to store data in database
          schema:
            $ref: '#/definitions/erros.InternalServerError'
      summary: Create user
      tags:
      - User
  /receivables:
    get:
      consumes:
      - application/json
      description: Returns all registered receivables
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.Receivable'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/receivable.ErrorResponse'
      summary: Get all receivables
      tags:
      - Receivable
    post:
      consumes:
      - application/json
      description: Creates a new receivable from the provided data
      parameters:
      - description: Receivable data
        in: body
        name: receivable
        required: true
        schema:
          $ref: '#/definitions/db.Receivable'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Receivable'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/receivable.ErrorResponse'
      summary: Creates a new receivable
      tags:
      - Receivable
  /receivables/{id}:
    get:
      consumes:
      - application/json
      description: Fetches a receivable by its ID
      parameters:
      - description: Receivable ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Receivable'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/receivable.ErrorResponse'
      summary: Get a receivable by ID
      tags:
      - Receivable
  /receivables/{id}/early_payment:
    get:
      consumes:
      - application/json
      description: Returns options for anticipating the receivable's payment
      parameters:
      - description: Receivable ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Receivable'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/receivable.ErrorResponse'
      summary: Fetches early payment options for a receivable
      tags:
      - Receivable
  /receivables/{id}/payment_date:
    put:
      consumes:
      - application/json
      description: Changes the payment date of the given receivable
      parameters:
      - description: Receivable ID
        in: path
        name: id
        required: true
        type: string
      - description: New Payment Date
        in: body
        name: payment_date
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Receivable'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/receivable.ErrorResponse'
      summary: Updates the payment date of a receivable
      tags:
      - Receivable
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
